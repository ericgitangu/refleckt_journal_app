#!/bin/bash
# setup-and-test.sh - Quickstart script for Refleckt Journal Backend
# This script will set up the environment, build all services, and run tests

set -e

# Script constants
BACKEND_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$BACKEND_DIR/scripts"
ENV_FILE="$BACKEND_DIR/.env"
TOKEN_FILE="$BACKEND_DIR/.token"
LOG_DIR="$BACKEND_DIR/setup-logs"

# Create logs directory
mkdir -p "$LOG_DIR"

# ANSI colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_banner() {
    local text="$1"
    local width="${2:-80}"
    local padding=$(( (width - ${#text} - 2) / 2 ))
    local line=$(printf '%*s' "$width" | tr ' ' '=')
    
    echo -e "\n$line"
    printf "%*s %s %*s\n" $padding "" "$text" $padding ""
    echo -e "$line\n"
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check for Rust/Cargo
    if ! command -v cargo &> /dev/null; then
        log_error "Rust/Cargo not found. Please install from https://rustup.rs"
        exit 1
    fi
    
    # Check for cargo-lambda
    if ! command -v cargo-lambda &> /dev/null; then
        log_warning "cargo-lambda not found. Installing..."
        cargo install cargo-lambda
        if [ $? -ne 0 ]; then
            log_error "Failed to install cargo-lambda. Please install manually."
            exit 1
        fi
    fi
    
    # Check for AWS CLI
    if ! command -v aws &> /dev/null; then
        log_warning "AWS CLI not found. Some features will be disabled."
    fi
    
    # Check for jq (used in testing)
    if ! command -v jq &> /dev/null; then
        log_warning "jq not found. Installing is recommended for testing features."
    fi
    
    log_success "Prerequisites checked."
}

setup_environment() {
    log_info "Setting up environment..."
    
    # Set up Rust toolchain
    if [ -f "$BACKEND_DIR/rust-toolchain.toml" ]; then
        log_info "Using Rust toolchain specified in rust-toolchain.toml"
        rustup show
    else
        log_info "Setting up Rust stable toolchain"
        rustup default stable
    fi
    
    # Add target for cross-compilation
    log_info "Adding target for cross-compilation"
    rustup target add aarch64-unknown-linux-musl
    
    # Create basic .env file if it doesn't exist
    if [ ! -f "$ENV_FILE" ]; then
        log_info "Creating basic .env file"
        cat > "$ENV_FILE" << EOF
# Generated by setup-and-test.sh script
API_URL=http://localhost:3000
LOG_LEVEL=debug
STAGE=dev
EOF
        log_success "Created .env file at $ENV_FILE"
    else
        log_info "Using existing .env file"
    fi
    
    # Create dummy auth token if it doesn't exist
    if [ ! -f "$TOKEN_FILE" ]; then
        log_info "Creating dummy authentication token for testing"
        echo "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXIiLCJpYXQiOjE2MTYxNjI4MDB9.dA4G5JMU0mGmhwY7XFQ9wI-tZ3G3TdPrKmfQN1fjqZ4" > "$TOKEN_FILE"
        log_success "Created dummy token at $TOKEN_FILE"
    else
        log_info "Using existing auth token"
    fi
    
    log_success "Environment setup complete."
}

build_services() {
    print_banner "BUILDING SERVICES"
    
    # Execute the build-all.sh script if it exists
    if [ -f "$SCRIPTS_DIR/build-all.sh" ]; then
        log_info "Running build-all.sh script..."
        bash "$SCRIPTS_DIR/build-all.sh" | tee "$LOG_DIR/build.log"
        
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log_error "Build failed. See $LOG_DIR/build.log for details."
            exit 1
        fi
    else
        # Otherwise try to build each service manually
        log_warning "build-all.sh not found, manually building services..."
        
        # First build common library
        if [ -d "$BACKEND_DIR/common" ]; then
            log_info "Building common library..."
            (cd "$BACKEND_DIR/common" && cargo build --release) | tee "$LOG_DIR/common-build.log"
            
            if [ ${PIPESTATUS[0]} -ne 0 ]; then
                log_error "Failed to build common library. See $LOG_DIR/common-build.log for details."
                exit 1
            fi
        fi
        
        # Then build each service
        for service in entry-service analytics-service ai-service settings-service authorizer prompts-service; do
            if [ -d "$BACKEND_DIR/$service" ]; then
                log_info "Building $service..."
                (cd "$BACKEND_DIR/$service" && cargo build --release) | tee "$LOG_DIR/$service-build.log"
                
                if [ ${PIPESTATUS[0]} -ne 0 ]; then
                    log_error "Failed to build $service. See $LOG_DIR/$service-build.log for details."
                    exit 1
                fi
            fi
        done
    fi
    
    log_success "All services built successfully."
}

run_tests() {
    print_banner "RUNNING TESTS"
    
    # Execute the test-endpoints.sh script if it exists
    if [ -f "$SCRIPTS_DIR/test-endpoints.sh" ]; then
        log_info "Running API endpoint tests..."
        bash "$SCRIPTS_DIR/test-endpoints.sh" | tee "$LOG_DIR/tests.log"
        
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log_warning "Some tests failed. See $LOG_DIR/tests.log for details."
        else
            log_success "All tests passed!"
        fi
    else
        log_warning "test-endpoints.sh not found, skipping tests."
    fi
}

summary() {
    print_banner "SETUP SUMMARY"
    
    log_success "Environment setup complete!"
    log_success "Services built successfully!"
    
    log_info "Next steps:"
    echo "1. To start the services locally:"
    echo "   sam local start-api"
    echo ""
    echo "2. To run specific tests:"
    echo "   ./scripts/test-endpoints.sh -e entries"
    echo ""
    echo "3. To deploy to AWS:"
    echo "   ./scripts/deploy-stack.sh -s dev"
    echo ""
    echo "For more information, please refer to the README.md file."
}

# Main execution
main() {
    print_banner "REFLEKT JOURNAL BACKEND SETUP"
    
    check_prerequisites
    setup_environment
    build_services
    run_tests
    summary
}

main 